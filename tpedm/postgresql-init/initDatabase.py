# -*- coding: utf-8 -*-
import psycopg2, json, time

class InitDatabase():
    def __init__(self):
        self.config = json.load(open("data//config.json","r",encoding="utf-8"))
        
    def create_database(self):
        dbConn = psycopg2.connect(
            database="postgres",
            user=self.config["database"]["user"],
            password=self.config["database"]["password"],
            #host='127.0.0.1', 
            host='dm_database',
            port= '5432')
        dbConn.autocommit = True
        
        cursor = dbConn.cursor()
        
        try:
            dropSQL = "DROP DATABASE " + self.config["database"]["dbName"] + ";"
            cursor.execute(dropSQL)
        except (Exception) as error:
            print("[INFO] " + str(error))
        
        createSQL = "CREATE database " + self.config["database"]["dbName"] + ";"
        cursor.execute(createSQL)
        dbConn.close()
        print("[INFO] Database created successfully........")
       
    def connect_db(self, config):
        try:
            conn = psycopg2.connect(
                #host='127.0.0.1', 
                host='dm_database',
                port= '5432',
                database=config["database"]["dbName"],
                user=config["database"]["user"],
                password=config["database"]["password"])
        except (Exception, psycopg2.DatabaseError) as error:
            print("[ERROR] " + str(error))
            return None
        else:
            print('[INFO] PostgreSQL database connected.')
            return conn    

    def create_table(self):
        try:
            dbConn = self.connect_db(self.config)
            cursor = dbConn.cursor()
            
            # Table MQTT User
            create_table_mqtt_user = '''CREATE TABLE mqtt_user (
                id SERIAL PRIMARY KEY,
                clientid CHARACTER VARYING(100),
                username CHARACTER VARYING(100),
                password CHARACTER VARYING(100),
                salt CHARACTER VARYING(40),
                is_superuser BOOLEAN,
                UNIQUE (clientid)
                );'''
            cursor.execute(create_table_mqtt_user)

            # Table clientid_profile
            create_table_clientid_profile = '''CREATE TABLE public.clientid_profile (
                id SERIAL PRIMARY KEY,
                clientid CHARACTER VARYING(100),
                connection_status bool NULL,
                host_name varchar NULL,
                model_name varchar NULL,                
                serial_number varchar NULL,
                firmware_version varchar NULL,
                bios_version varchar NULL,
                tpe_version varchar NULL,
                new_scaned_package varchar NULL,
                created_at bigint NOT NULL,
                profile_updated_at bigint,
                connection_status_updated_at bigint);'''                
            cursor.execute(create_table_clientid_profile)            
            
            # Device Management Category
            create_table_dm_category = '''CREATE TABLE public.dm_category (
                id int8 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
                name varchar NOT NULL);'''
            cursor.execute(create_table_dm_category)
            
            # Device Management Operation
            create_table_dm_operation = '''CREATE TABLE public.dm_operation (
                id int8 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
                categoryid int8 NOT NULL,
                name varchar NOT NULL,
                command varchar);'''
            cursor.execute(create_table_dm_operation)
            
            # Index : Table clientid_profile
            create_index_clientid_profile = '''CREATE UNIQUE INDEX clientid_profile_idx ON public.clientid_profile (clientid);'''
            cursor.execute(create_index_clientid_profile)            
            
            # Indexï¼šTable dm_operation
            create_index_dm_operation = '''CREATE INDEX dm_operation_categoryid_idx ON public.dm_operation (categoryid);'''
            cursor.execute(create_index_dm_operation)
            
            dbConn.commit()
            dbConn.close()
            
            print("[INFO] Tables created successfully........")
        except (Exception) as error:
            print("[ERROR] " + str(error))
            
    def insert_dm_commands(self):
        try:
            dbConn = self.connect_db(self.config)
            cursor = dbConn.cursor()            
            importCommands = json.load(open("data//command.json","r",encoding="utf-8"))
            
            # TRUNCATE table public.dm_category- 
            truncate_table_dm_category = '''TRUNCATE TABLE public.dm_category;'''
            cursor.execute(truncate_table_dm_category)
            
            # TRUNCATE table public.dm_operation- 
            truncate_table_dm_operation = '''TRUNCATE TABLE public.dm_operation;'''
            cursor.execute(truncate_table_dm_operation)            
            dbConn.commit()            
           
            # Insert Category & Operation command
            for category in importCommands["category"]:
                c_name = category["name"]
                category_sql = "INSERT INTO public.dm_category(name) values ('" + c_name + "') RETURNING id"
                cursor.execute(category_sql)
                categoryid = cursor.fetchone()[0]
                for operation in category["operation"]:
                    o_name = operation["name"]
                    o_cmd = operation["command"]
                    operation_sql = "INSERT INTO public.dm_operation(categoryid, name, command) VALUES (" + str(categoryid) + ",'" + o_name + "','" + json.dumps(o_cmd) + "')"
                    cursor.execute(operation_sql)
            
            dbConn.commit()
            dbConn.close()
            
        except (Exception) as error:
            print("[ERROR] " + str(error))

    def run(self):
        self.create_database()
        
        self.create_table()
        
        self.insert_dm_commands()

if __name__ == '__main__':
    initDB = InitDatabase()
    initDB.run()
